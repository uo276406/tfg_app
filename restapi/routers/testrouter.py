from fastapi import APIRouter, status, Depends
from users.usersmanager import fastapi_users
from repository.testrepository import insert_test
from repository.questionsrepository import insert_question
from repository.answersrepository import insert_answer
from models.user import User
from pydantic import BaseModel
import uuid

router = APIRouter()

# Modelos: Request --------------------------------------------------


class Answer(BaseModel):
    value: str
    correct: bool


class Question(BaseModel):
    question: str
    options: list[Answer]


class Test(BaseModel):
    questions: list[Question]


# This is a FastAPI dependency that checks if the user is authenticated.
current_active_user = fastapi_users.current_user(active=True)

"""
    This is a FastAPI endpoint that generates questions based on a given text and selected keywords.
    @param text_keywords - A request body containing the text body and selected keywords.
    @return list of Questions - The generated questions.
    """


@router.post("/add", status_code=status.HTTP_200_OK, description="Add new test generated by the user based on the questions", response_description="Add new test generated by the user")
async def add_test(test: Test, user: User = Depends(current_active_user)):
    
    new_test = {"id": str(uuid.uuid4()), "user_id": str(user.id)}
    await insert_test(new_test)
    question_index = 0
    for question in test.questions:
        await insert_question({"id": question_index, "question_text": question.question, "test_id": new_test["id"]})
        question_index += 1
        option_index = 0
        for option in question.options:
            await insert_answer({"id": option_index, "value": option.value, "is_correct": option.correct, "question_id": question_index})
            option_index += 1